/*
 * BFD protocol specifics from:
 * RFC5880 (https://datatracker.ietf.org/doc/html/rfc5880)
 * RFC5881 (https://datatracker.ietf.org/doc/html/rfc5881)
 *
 * Generic BFD Control Packet Format:
 *
 * Mandatory section (yes, I numbered every bit, get over it):
 * 
 *   0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |Vers |  Diag   |Sta|P|F|C|A|D|M|  Detect Mult  |    Length     |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                       My Discriminator                        |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                      Your Discriminator                       |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                    Desired Min TX Interval                    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                   Required Min RX Interval                    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |                 Required Min Echo RX Interval                 |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */

#ifndef BFD_PACKET_H_
#define BFD_PACKET_H_

#include <stdint.h>
#include <arpa/inet.h>

/* BFD control packet length without authentication, in bytes */
#define BFD_PKG_MIN_SIZE    24

/* Authentication section not present (currently not supported) */
struct bfd_ctrl_packet {
    union {
        uint8_t version;                        /* Protocol version (always 1) */
        uint8_t diag;                           /* Diagnostic code for last session state change */
    } byte1;
    union {
        uint8_t state;                          /* Current BFD session state */
        uint8_t poll;
        uint8_t final;
        uint8_t ctrl_plane_independent;
        uint8_t auth_present;                   /* Authentication present */
        uint8_t demand;                         /* Demand mode */
        uint8_t multipoint;                     /* Multipoint (not supported) */
    } byte2;
    uint8_t detect_mult;                        /* Detection time multiplier */
    uint8_t length;                             /* Length of BFD control packet in bytes */
    uint32_t my_discr;                          /* My discriminator, unique per session value */
    uint32_t your_discr;                        /* Your discriminator, received from corresponding remote system */
    uint32_t des_min_tx_interval;               /* Desired min TX interval, in microseconds (RFC5880: section 6.8.2 for details) */
    uint32_t req_min_rx_interval;               /* Required min RX interval, in microseconds (RFC5880: section 6.8.2 for details) */
    uint32_t req_min_echo_rx_interval;          /* Required min echo RX interval, in microseconds (RFC5880: section 6.8.9 for details) */
} __attribute__((__packed__));

void bfd_build_packet(uint8_t diag, uint8_t state, uint8_t detect_mult, uint32_t my_discr,
                uint32_t your_discr, uint32_t des_min_tx_interval, uint32_t req_min_rx_interval,
                struct bfd_ctrl_packet *packet) {

    /* Protocol version, always 1 */
    packet->byte1.version = 0x20;
    
    /* Diagnostic code */
    packet->byte1.diag |= diag & 0x1F;

    /* Clear second byte, since most flags are disabled */
    packet->byte2.state = 0;

    /* Only set BFD session state */
    packet->byte2.state = (state << 6) & 0xC0;

    /* 
     * Detection time multiplier: The negotiated transmit interval, multiplied by this value,
     * provides the Detection Time for the receiving system in Asynchronous mode.
     */
    packet->detect_mult = detect_mult;

    /* Length of BFD control packet in bytes */
    packet->length = BFD_PKG_MIN_SIZE;

    /* My discriminator: unique value per session, generated by the transmitting system */
    packet->my_discr = htonl(my_discr);

    /*
     * Your discriminator: the discriminator value received from the corresponding remote system.
     * Zero if unknown.
     */
    packet->your_discr = htonl(your_discr);

    /* 
     * Desired min TX interval: minimum interval, in microseconds, that the local system would 
     * like to use when transmitting BFD Control packets,less any jitter applied (see section 6.8.2).
     */
    packet->des_min_tx_interval = htonl(des_min_tx_interval);

    /*
     * Required min RX interval: minimum interval, in microseconds, between received BFD Control packets 
     * that this system is capable of supporting, less any jitter applied by the sender (see section 6.8.2).
     * If this value is zero, the transmitting system does not want the remote system to send any periodic 
     * BFD Control packets.
     */
    packet->req_min_rx_interval = htonl(req_min_rx_interval);

    /* Required min echo RX interval, in microseconds  - always 0, echo mode currently not supported */
    packet->req_min_echo_rx_interval = 0;
}

#endif //BFD_PACKET_H_